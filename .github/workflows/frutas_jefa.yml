name: frutas_jefa.yml
on:
  push:
    branches: [ "main" ]
    pull_request:

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: ontology-dp/frutas


jobs:
  build_and_test:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Correr pruebas
        run: |
          echo "Probando..."

  build_and_push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write     # si vas a GHCR; para DockerHub usa env vars
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU (multi-arch opcional)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log-in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASS }}

      - name: Build & push imagen üçä
        uses: docker/build-push-action@v5
        with:
          context: ./dp
          file: ./dp/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
  deploy:
    needs: build_and_test
    runs-on: ubuntu-latest
    if: ${{ success() }}
    steps:
      - uses: actions/checkout@v3
      - name: Install rsync
        run: |
          sudo apt-get update
          sudo apt-get install -y --reinstall rsync
      - name: Check path
        run: which rsync
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}
      - name: Debug rsync
        run: |
          which rsync || true
          ls -l /usr/bin/rsync || true
          /usr/bin/rsync --version || true
      - name: Copy to server
        run: |
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" . \
              ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PATH }}
      - name: üö¢  Deploy en el servidor
        env:
          HOST: ${{ secrets.DEPLOY_HOST }}
          USER: ${{ secrets.DEPLOY_USER }}
          PROJECT_DIR: /var/www/frutas_ontologia/dp
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          STACK: frutas_frontend    # nombre del servicio en docker-compose
          PORT: 8081
        run: |
          ssh -o StrictHostKeyChecking=no ${USER}@${HOST} /bin/bash <<'REMOTE'
            set -Eeuo pipefail
            COLOR_OK='\033[0;32m'; COLOR_INFO='\033[0;36m'; COLOR_ERR='\033[0;31m'; NC='\033[0m'
            step() { printf "${COLOR_INFO}‚ñ∂ $1‚Ä¶${NC}\n"; }
            ok()   { printf "${COLOR_OK}‚úî $1${NC}\n"; }
            err()  { printf "${COLOR_ERR}‚úñ $1${NC}\n"; exit 1; }
          
            PROJECT_DIR="${PROJECT_DIR}"
            IMAGE="${IMAGE_NAME}:latest"
            STACK="${STACK}"
            HEALTH="http://127.0.0.1:${PORT}/"
          
            step "1) Pull de la imagen nueva"
            sudo docker pull "${IMAGE}" || err "pull fall√≥"
          
            step "2) Recrear servicio ${STACK}"
            sudo docker compose -f "${PROJECT_DIR}/docker-compose.yml" up -d --no-deps --build ${STACK} \
              || err "docker compose fall√≥"
          
            step "3) Health-check (${HEALTH})"
            for i in {1..15}; do curl -fsSL "$HEALTH" && break || sleep 2; done
            curl -fsSL "$HEALTH" >/dev/null || { err "Healthcheck fall√≥"; }
          
            step "4) Limpiar capas antiguas"
            sudo docker image prune -af -q || true
          
            step "5) Recargar Nginx"
            sudo systemctl reload nginx
          
            ok "Deploy completado con √©xito"
          REMOTE